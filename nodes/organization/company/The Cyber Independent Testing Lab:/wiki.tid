activities:
annual.budget:
audience:
created:1582954204768
date.ended:
date.founded:
digital.harms.addressed:
element.type:organization
funding:
github.profile:
input.source:me2b
key.people:
linkedin.profile:
location(s):
me2b.relationship:
modified:1582954204768
org.name:The Cyber Independent Testing Lab:
org.type:company
parent.org:
partners:
products.and.or.services:
purpose:[[consumer education]]
relevant.publications:
scope:
sector:for-profit
status:
tags:[[security auditing]]
tech.focus:
tiddler.classification:node
title:The Cyber Independent Testing Lab:
tmap.edges:{}
tmap.id:fdc27622-ceca-4aea-b9b5-7d83b838a6f8
twitter.profile:
type:text/vnd.tiddlywiki
website:https://cyber-itl.org

The Main Question “How difficult is it for an attacker to find a new exploit for this software?”

Attackers have limited resources, and just like anyone else, they don't like to waste their time doing something the hard way if an easier path is available. They have tricks and heuristics they use to assess the relative difficulty to exploit software, so that they can focus on the easy targets and low hanging fruit. Mudge has had a long career of doing just that (legally, and for research purposes), so he's developed his own personal toolkit of measurements to take when assessing software risk. By consulting with other luminaries of the security field who have extensive exploit development experience, we've been able to build up the list of static analysis metrics and features which we currently assess.



